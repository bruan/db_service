// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "query_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {

namespace {

const ::google::protobuf::Descriptor* query_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_query_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_query_5fcommand_2eproto() {
  protobuf_AddDesc_query_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "query_command.proto");
  GOOGLE_CHECK(file != NULL);
  query_command_descriptor_ = file->message_type(0);
  static const int query_command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_command, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_command, where_clause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_command, args_),
  };
  query_command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      query_command_descriptor_,
      query_command::internal_default_instance(),
      query_command_offsets_,
      -1,
      -1,
      -1,
      sizeof(query_command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_command, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_query_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      query_command_descriptor_, query_command::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_query_5fcommand_2eproto() {
  query_command_default_instance_.Shutdown();
  delete query_command_reflection_;
}

void protobuf_InitDefaults_query_5fcommand_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  query_command_default_instance_.DefaultConstruct();
  query_command_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_query_5fcommand_2eproto_once_);
void protobuf_InitDefaults_query_5fcommand_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_query_5fcommand_2eproto_once_,
                 &protobuf_InitDefaults_query_5fcommand_2eproto_impl);
}
void protobuf_AddDesc_query_5fcommand_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_query_5fcommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023query_command.proto\022\010proto.db\"G\n\rquery"
    "_command\022\022\n\ntable_name\030\001 \001(\t\022\024\n\014where_cl"
    "ause\030\002 \001(\t\022\014\n\004args\030\003 \003(\014b\006proto3", 112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "query_command.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_query_5fcommand_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_query_5fcommand_2eproto_once_);
void protobuf_AddDesc_query_5fcommand_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_query_5fcommand_2eproto_once_,
                 &protobuf_AddDesc_query_5fcommand_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_query_5fcommand_2eproto {
  StaticDescriptorInitializer_query_5fcommand_2eproto() {
    protobuf_AddDesc_query_5fcommand_2eproto();
  }
} static_descriptor_initializer_query_5fcommand_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_command::kTableNameFieldNumber;
const int query_command::kWhereClauseFieldNumber;
const int query_command::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_command::query_command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_query_5fcommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.query_command)
}

void query_command::InitAsDefaultInstance() {
}

query_command::query_command(const query_command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.db.query_command)
}

void query_command::SharedCtor() {
  dirty_ = false;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_clause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

query_command::~query_command() {
  // @@protoc_insertion_point(destructor:proto.db.query_command)
  SharedDtor();
}

void query_command::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_clause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void query_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_command_descriptor_;
}

const query_command& query_command::default_instance() {
  protobuf_InitDefaults_query_5fcommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<query_command> query_command_default_instance_;

query_command* query_command::New(::google::protobuf::Arena* arena) const {
  query_command* n = new query_command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_command::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.query_command)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  where_clause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.Clear();
}

bool query_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.query_command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.db.query_command.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_where_clause;
        break;
      }

      // optional string where_clause = 2;
      case 2: {
        if (tag == 18) {
         parse_where_clause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_clause()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->where_clause().data(), this->where_clause().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.db.query_command.where_clause"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated bytes args = 3;
      case 3: {
        if (tag == 26) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.query_command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.query_command)
  return false;
#undef DO_
}

void query_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.query_command)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.db.query_command.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // optional string where_clause = 2;
  if (this->where_clause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_clause().data(), this->where_clause().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.db.query_command.where_clause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->where_clause(), output);
  }

  // repeated bytes args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->args(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.db.query_command)
}

::google::protobuf::uint8* query_command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.query_command)
  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.db.query_command.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional string where_clause = 2;
  if (this->where_clause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->where_clause().data(), this->where_clause().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.db.query_command.where_clause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->where_clause(), target);
  }

  // repeated bytes args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->args(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.db.query_command)
  return target;
}

size_t query_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.query_command)
  size_t total_size = 0;

  // optional string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional string where_clause = 2;
  if (this->where_clause().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->where_clause());
  }

  // repeated bytes args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.query_command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const query_command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.query_command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.query_command)
    UnsafeMergeFrom(*source);
  }
}

void query_command::MergeFrom(const query_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.query_command)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void query_command::UnsafeMergeFrom(const query_command& from) {
  GOOGLE_DCHECK(&from != this);
  args_.UnsafeMergeFrom(from.args_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.where_clause().size() > 0) {

    where_clause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.where_clause_);
  }
}

void query_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.query_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_command::CopyFrom(const query_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.query_command)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool query_command::IsInitialized() const {

  return true;
}

void query_command::Swap(query_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_command::InternalSwap(query_command* other) {
  table_name_.Swap(&other->table_name_);
  where_clause_.Swap(&other->where_clause_);
  args_.UnsafeArenaSwap(&other->args_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_command_descriptor_;
  metadata.reflection = query_command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// query_command

// optional string table_name = 1;
void query_command::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
dirty_ = true;
}
const ::std::string& query_command::table_name() const {
  // @@protoc_insertion_point(field_get:proto.db.query_command.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void query_command::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.query_command.table_name)
}
void query_command::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_char:proto.db.query_command.table_name)
}
void query_command::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_pointer:proto.db.query_command.table_name)
}
::std::string* query_command::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.db.query_command.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* query_command::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.db.query_command.table_name)
  
  dirty_ = true;
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void query_command::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  dirty_ = true;
  // @@protoc_insertion_point(field_set_allocated:proto.db.query_command.table_name)
}

// optional string where_clause = 2;
void query_command::clear_where_clause() {
  where_clause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
dirty_ = true;
}
const ::std::string& query_command::where_clause() const {
  // @@protoc_insertion_point(field_get:proto.db.query_command.where_clause)
  return where_clause_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void query_command::set_where_clause(const ::std::string& value) {
  
  where_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.query_command.where_clause)
}
void query_command::set_where_clause(const char* value) {
  
  where_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_char:proto.db.query_command.where_clause)
}
void query_command::set_where_clause(const char* value, size_t size) {
  
  where_clause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_pointer:proto.db.query_command.where_clause)
}
::std::string* query_command::mutable_where_clause() {
  
  // @@protoc_insertion_point(field_mutable:proto.db.query_command.where_clause)
  return where_clause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* query_command::release_where_clause() {
  // @@protoc_insertion_point(field_release:proto.db.query_command.where_clause)
  
  dirty_ = true;
  return where_clause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void query_command::set_allocated_where_clause(::std::string* where_clause) {
  if (where_clause != NULL) {
    
  } else {
    
  }
  where_clause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_clause);
  dirty_ = true;
  // @@protoc_insertion_point(field_set_allocated:proto.db.query_command.where_clause)
}

// repeated bytes args = 3;
int query_command::args_size() const {
  return args_.size();
}
void query_command::clear_args() {
  args_.Clear();
dirty_ = true;
}
const ::std::string& query_command::args(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.query_command.args)
  return args_.Get(index);
}
::std::string* query_command::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.query_command.args)
  return args_.Mutable(index);
}
void query_command::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.db.query_command.args)
  dirty_ = true;
  args_.Mutable(index)->assign(value);
}
void query_command::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  dirty_ = true;
  // @@protoc_insertion_point(field_set_char:proto.db.query_command.args)
}
void query_command::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  dirty_ = true;
  // @@protoc_insertion_point(field_set_pointer:proto.db.query_command.args)
}
::std::string* query_command::add_args() {
  // @@protoc_insertion_point(field_add_mutable:proto.db.query_command.args)
  dirty_ = true;
  return args_.Add();
}
void query_command::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  dirty_ = true;
  // @@protoc_insertion_point(field_add:proto.db.query_command.args)
}
void query_command::add_args(const char* value) {
  args_.Add()->assign(value);
  dirty_ = true;
  // @@protoc_insertion_point(field_add_char:proto.db.query_command.args)
}
void query_command::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  dirty_ = true;
  // @@protoc_insertion_point(field_add_pointer:proto.db.query_command.args)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
query_command::args() const {
  // @@protoc_insertion_point(field_list:proto.db.query_command.args)
  return args_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
query_command::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.query_command.args)
  return &args_;
}

inline const query_command* query_command::internal_default_instance() {
  return &query_command_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)
