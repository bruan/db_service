// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {

namespace {

const ::google::protobuf::Descriptor* request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  request_descriptor_ = file->message_type(0);
  static const int request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, associate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, content_),
  };
  request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_descriptor_,
      request::internal_default_instance(),
      request_offsets_,
      -1,
      -1,
      -1,
      sizeof(request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_descriptor_, request::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  request_default_instance_.Shutdown();
  delete request_reflection_;
}

void protobuf_InitDefaults_request_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  request_default_instance_.DefaultConstruct();
  request_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_request_2eproto_once_);
void protobuf_InitDefaults_request_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_request_2eproto_once_,
                 &protobuf_InitDefaults_request_2eproto_impl);
}
void protobuf_AddDesc_request_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_request_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\022\010proto.db\032\031google/protob"
    "uf/any.proto\"h\n\007request\022\022\n\nsession_id\030\001 "
    "\001(\004\022\024\n\014associate_id\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022"
    "%\n\007content\030\004 \001(\0132\024.google.protobuf.Anyb\006"
    "proto3", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_request_2eproto_once_);
void protobuf_AddDesc_request_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_request_2eproto_once_,
                 &protobuf_AddDesc_request_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int request::kSessionIdFieldNumber;
const int request::kAssociateIdFieldNumber;
const int request::kTypeFieldNumber;
const int request::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

request::request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_request_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.request)
}

void request::InitAsDefaultInstance() {
  content_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

request::request(const request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.db.request)
}

void request::SharedCtor() {
  dirty_ = false;
  content_ = NULL;
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(type_));
  _cached_size_ = 0;
}

request::~request() {
  // @@protoc_insertion_point(destructor:proto.db.request)
  SharedDtor();
}

void request::SharedDtor() {
  if (this != &request_default_instance_.get()) {
    delete content_;
  }
}

void request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_descriptor_;
}

const request& request::default_instance() {
  protobuf_InitDefaults_request_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<request> request_default_instance_;

request* request::New(::google::protobuf::Arena* arena) const {
  request* n = new request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_id_, type_);
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 session_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_associate_id;
        break;
      }

      // optional uint32 associate_id = 2;
      case 2: {
        if (tag == 16) {
         parse_associate_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &associate_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional .google.protobuf.Any content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.request)
  return false;
#undef DO_
}

void request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.request)
  // optional uint64 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session_id(), output);
  }

  // optional uint32 associate_id = 2;
  if (this->associate_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->associate_id(), output);
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional .google.protobuf.Any content = 4;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->content_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.db.request)
}

::google::protobuf::uint8* request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.request)
  // optional uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session_id(), target);
  }

  // optional uint32 associate_id = 2;
  if (this->associate_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->associate_id(), target);
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional .google.protobuf.Any content = 4;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->content_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.db.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.request)
  size_t total_size = 0;

  // optional uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session_id());
  }

  // optional uint32 associate_id = 2;
  if (this->associate_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->associate_id());
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional .google.protobuf.Any content = 4;
  if (this->has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.request)
    UnsafeMergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void request::UnsafeMergeFrom(const request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.associate_id() != 0) {
    set_associate_id(from.associate_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_content()) {
    mutable_content()->::google::protobuf::Any::MergeFrom(from.content());
  }
}

void request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool request::IsInitialized() const {

  return true;
}

void request::Swap(request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request::InternalSwap(request* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(associate_id_, other->associate_id_);
  std::swap(type_, other->type_);
  std::swap(content_, other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_descriptor_;
  metadata.reflection = request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// request

// optional uint64 session_id = 1;
void request::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
dirty_ = true;
}
::google::protobuf::uint64 request::session_id() const {
  // @@protoc_insertion_point(field_get:proto.db.request.session_id)
  return session_id_;
}
void request::set_session_id(::google::protobuf::uint64 value) {
  
  session_id_ = value;
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.request.session_id)
}

// optional uint32 associate_id = 2;
void request::clear_associate_id() {
  associate_id_ = 0u;
dirty_ = true;
}
::google::protobuf::uint32 request::associate_id() const {
  // @@protoc_insertion_point(field_get:proto.db.request.associate_id)
  return associate_id_;
}
void request::set_associate_id(::google::protobuf::uint32 value) {
  
  associate_id_ = value;
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.request.associate_id)
}

// optional uint32 type = 3;
void request::clear_type() {
  type_ = 0u;
dirty_ = true;
}
::google::protobuf::uint32 request::type() const {
  // @@protoc_insertion_point(field_get:proto.db.request.type)
  return type_;
}
void request::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.request.type)
}

// optional .google.protobuf.Any content = 4;
bool request::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
void request::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
dirty_ = true;
}
const ::google::protobuf::Any& request::content() const {
  // @@protoc_insertion_point(field_get:proto.db.request.content)
  return content_ != NULL ? *content_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* request::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:proto.db.request.content)
  return content_;
}
::google::protobuf::Any* request::release_content() {
  // @@protoc_insertion_point(field_release:proto.db.request.content)
  
  ::google::protobuf::Any* temp = content_;
  content_ = NULL;
  return temp;
}
void request::set_allocated_content(::google::protobuf::Any* content) {
  delete content_;
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.db.request.content)
}

inline const request* request::internal_default_instance() {
  return &request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)
