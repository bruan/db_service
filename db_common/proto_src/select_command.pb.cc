// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: select_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "select_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {

namespace {

const ::google::protobuf::Descriptor* select_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_select_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_select_5fcommand_2eproto() {
  protobuf_AddDesc_select_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "select_command.proto");
  GOOGLE_CHECK(file != NULL);
  select_command_descriptor_ = file->message_type(0);
  static const int select_command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_command, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_command, table_name_),
  };
  select_command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      select_command_descriptor_,
      select_command::default_instance_,
      select_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_command, _has_bits_[0]),
      -1,
      -1,
      sizeof(select_command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_command, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_select_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      select_command_descriptor_, &select_command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_select_5fcommand_2eproto() {
  delete select_command::default_instance_;
  delete select_command_reflection_;
}

void protobuf_AddDesc_select_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_select_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024select_command.proto\022\010proto.db\"0\n\016sele"
    "ct_command\022\n\n\002id\030\001 \002(\004\022\022\n\ntable_name\030\002 \002"
    "(\t", 82);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "select_command.proto", &protobuf_RegisterTypes);
  select_command::default_instance_ = new select_command();
  select_command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_select_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_select_5fcommand_2eproto {
  StaticDescriptorInitializer_select_5fcommand_2eproto() {
    protobuf_AddDesc_select_5fcommand_2eproto();
  }
} static_descriptor_initializer_select_5fcommand_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int select_command::kIdFieldNumber;
const int select_command::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

select_command::select_command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.select_command)
}

void select_command::InitAsDefaultInstance() {
}

select_command::select_command(const select_command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.db.select_command)
}

void select_command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_command::~select_command() {
  // @@protoc_insertion_point(destructor:proto.db.select_command)
  SharedDtor();
}

void select_command::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void select_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_command_descriptor_;
}

const select_command& select_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_select_5fcommand_2eproto();
  return *default_instance_;
}

select_command* select_command::default_instance_ = NULL;

select_command* select_command::New(::google::protobuf::Arena* arena) const {
  select_command* n = new select_command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void select_command::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.select_command)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool select_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.select_command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required string table_name = 2;
      case 2: {
        if (tag == 18) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.db.select_command.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.select_command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.select_command)
  return false;
#undef DO_
}

void select_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.select_command)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.db.select_command.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.db.select_command)
}

::google::protobuf::uint8* select_command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.select_command)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.db.select_command.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.db.select_command)
  return target;
}

int select_command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.db.select_command)
  int total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_table_name()) {
    // required string table_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  return total_size;
}
int select_command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.select_command)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required string table_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.select_command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const select_command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const select_command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.select_command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.select_command)
    MergeFrom(*source);
  }
}

void select_command::MergeFrom(const select_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.select_command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void select_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.select_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_command::CopyFrom(const select_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.select_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void select_command::Swap(select_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void select_command::InternalSwap(select_command* other) {
  std::swap(id_, other->id_);
  table_name_.Swap(&other->table_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata select_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_command_descriptor_;
  metadata.reflection = select_command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// select_command

// required uint64 id = 1;
bool select_command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void select_command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void select_command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void select_command::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 select_command::id() const {
  // @@protoc_insertion_point(field_get:proto.db.select_command.id)
  return id_;
}
 void select_command::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.select_command.id)
}

// required string table_name = 2;
bool select_command::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void select_command::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
void select_command::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void select_command::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& select_command::table_name() const {
  // @@protoc_insertion_point(field_get:proto.db.select_command.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void select_command::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.db.select_command.table_name)
}
 void select_command::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.db.select_command.table_name)
}
 void select_command::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.db.select_command.table_name)
}
 ::std::string* select_command::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:proto.db.select_command.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* select_command::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.db.select_command.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void select_command::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.db.select_command.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)
