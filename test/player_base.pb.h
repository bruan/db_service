// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_base.proto

#ifndef PROTOBUF_player_5fbase_2eproto__INCLUDED
#define PROTOBUF_player_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_option.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_player_5fbase_2eproto();
void protobuf_AssignDesc_player_5fbase_2eproto();
void protobuf_ShutdownFile_player_5fbase_2eproto();

class player_base;
class player_base_set;

// ===================================================================

class player_base : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.db.player_base) */ {
 public:
  player_base();
  virtual ~player_base();

  player_base(const player_base& from);

  inline player_base& operator=(const player_base& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_base& default_instance();

  void Swap(player_base* other);

  // implements Message ----------------------------------------------

  inline player_base* New() const { return New(NULL); }

  player_base* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_base& from);
  void MergeFrom(const player_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(player_base* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.db.player_base)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_player_5fbase_2eproto();
  friend void protobuf_AssignDesc_player_5fbase_2eproto();
  friend void protobuf_ShutdownFile_player_5fbase_2eproto();

  void InitAsDefaultInstance();
  static player_base* default_instance_;
};
// -------------------------------------------------------------------

class player_base_set : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.db.player_base_set) */ {
 public:
  player_base_set();
  virtual ~player_base_set();

  player_base_set(const player_base_set& from);

  inline player_base_set& operator=(const player_base_set& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_base_set& default_instance();

  void Swap(player_base_set* other);

  // implements Message ----------------------------------------------

  inline player_base_set* New() const { return New(NULL); }

  player_base_set* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_base_set& from);
  void MergeFrom(const player_base_set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(player_base_set* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.db.player_base data_set = 1;
  int data_set_size() const;
  void clear_data_set();
  static const int kDataSetFieldNumber = 1;
  const ::proto::db::player_base& data_set(int index) const;
  ::proto::db::player_base* mutable_data_set(int index);
  ::proto::db::player_base* add_data_set();
  ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >*
      mutable_data_set();
  const ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >&
      data_set() const;

  // @@protoc_insertion_point(class_scope:proto.db.player_base_set)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::proto::db::player_base > data_set_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_player_5fbase_2eproto();
  friend void protobuf_AssignDesc_player_5fbase_2eproto();
  friend void protobuf_ShutdownFile_player_5fbase_2eproto();

  void InitAsDefaultInstance();
  static player_base_set* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// player_base

// optional sfixed32 id = 1;
inline void player_base::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 player_base::id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.id)
  return id_;
}
inline void player_base::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.id)
}

// optional bytes name = 2;
inline void player_base::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& player_base::name() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void player_base::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.db.player_base.name)
}
inline void player_base::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.db.player_base.name)
}
inline void player_base::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.db.player_base.name)
}
inline ::std::string* player_base::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.db.player_base.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* player_base::release_name() {
  // @@protoc_insertion_point(field_release:proto.db.player_base.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void player_base::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.db.player_base.name)
}

// -------------------------------------------------------------------

// player_base_set

// repeated .proto.db.player_base data_set = 1;
inline int player_base_set::data_set_size() const {
  return data_set_.size();
}
inline void player_base_set::clear_data_set() {
  data_set_.Clear();
}
inline const ::proto::db::player_base& player_base_set::data_set(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.player_base_set.data_set)
  return data_set_.Get(index);
}
inline ::proto::db::player_base* player_base_set::mutable_data_set(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.player_base_set.data_set)
  return data_set_.Mutable(index);
}
inline ::proto::db::player_base* player_base_set::add_data_set() {
  // @@protoc_insertion_point(field_add:proto.db.player_base_set.data_set)
  return data_set_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >*
player_base_set::mutable_data_set() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.player_base_set.data_set)
  return &data_set_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >&
player_base_set::data_set() const {
  // @@protoc_insertion_point(field_list:proto.db.player_base_set.data_set)
  return data_set_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_5fbase_2eproto__INCLUDED
