// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {

namespace {

const ::google::protobuf::Descriptor* player_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_base_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_base_set_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_5fbase_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_player_5fbase_2eproto() {
  protobuf_AddDesc_player_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player_base.proto");
  GOOGLE_CHECK(file != NULL);
  player_base_descriptor_ = file->message_type(0);
  static const int player_base_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_base, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_base, name_),
  };
  player_base_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      player_base_descriptor_,
      player_base::internal_default_instance(),
      player_base_offsets_,
      -1,
      -1,
      -1,
      sizeof(player_base),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_base, _internal_metadata_));
  player_base_set_descriptor_ = file->message_type(1);
  static const int player_base_set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_base_set, data_set_),
  };
  player_base_set_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      player_base_set_descriptor_,
      player_base_set::internal_default_instance(),
      player_base_set_offsets_,
      -1,
      -1,
      -1,
      sizeof(player_base_set),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_base_set, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      player_base_descriptor_, player_base::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      player_base_set_descriptor_, player_base_set::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_5fbase_2eproto() {
  player_base_default_instance_.Shutdown();
  delete player_base_reflection_;
  player_base_set_default_instance_.Shutdown();
  delete player_base_set_reflection_;
}

void protobuf_InitDefaults_player_5fbase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_db_5foption_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  player_base_default_instance_.DefaultConstruct();
  player_base_set_default_instance_.DefaultConstruct();
  player_base_default_instance_.get_mutable()->InitAsDefaultInstance();
  player_base_set_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_player_5fbase_2eproto_once_);
void protobuf_InitDefaults_player_5fbase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_player_5fbase_2eproto_once_,
                 &protobuf_InitDefaults_player_5fbase_2eproto_impl);
}
void protobuf_AddDesc_player_5fbase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_player_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021player_base.proto\022\010proto.db\032\017db_option"
    ".proto\"/\n\013player_base\022\n\n\002id\030\001 \001(\017\022\014\n\004nam"
    "e\030\002 \001(\014:\006\202\265\030\002id\":\n\017player_base_set\022\'\n\010da"
    "ta_set\030\001 \003(\0132\025.proto.db.player_baseb\006pro"
    "to3", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player_base.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_db_5foption_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_5fbase_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_player_5fbase_2eproto_once_);
void protobuf_AddDesc_player_5fbase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_player_5fbase_2eproto_once_,
                 &protobuf_AddDesc_player_5fbase_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_5fbase_2eproto {
  StaticDescriptorInitializer_player_5fbase_2eproto() {
    protobuf_AddDesc_player_5fbase_2eproto();
  }
} static_descriptor_initializer_player_5fbase_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_base::kIdFieldNumber;
const int player_base::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_base::player_base()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_player_5fbase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_base)
}

void player_base::InitAsDefaultInstance() {
}

player_base::player_base(const player_base& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.db.player_base)
}

void player_base::SharedCtor() {
  dirty_ = false;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

player_base::~player_base() {
  // @@protoc_insertion_point(destructor:proto.db.player_base)
  SharedDtor();
}

void player_base::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void player_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_base_descriptor_;
}

const player_base& player_base::default_instance() {
  protobuf_InitDefaults_player_5fbase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<player_base> player_base_default_instance_;

player_base* player_base::New(::google::protobuf::Arena* arena) const {
  player_base* n = new player_base;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_base::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_base)
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool player_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 id = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_base)
  return false;
#undef DO_
}

void player_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_base)
  // optional sfixed32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.db.player_base)
}

::google::protobuf::uint8* player_base::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_base)
  // optional sfixed32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_base)
  return target;
}

size_t player_base::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_base)
  size_t total_size = 0;

  // optional sfixed32 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 4;
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_base::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_base)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const player_base* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_base>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_base)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_base)
    UnsafeMergeFrom(*source);
  }
}

void player_base::MergeFrom(const player_base& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_base)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void player_base::UnsafeMergeFrom(const player_base& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void player_base::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_base::CopyFrom(const player_base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_base)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool player_base::IsInitialized() const {

  return true;
}

void player_base::Swap(player_base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_base::InternalSwap(player_base* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_base_descriptor_;
  metadata.reflection = player_base_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_base

// optional sfixed32 id = 1;
void player_base::clear_id() {
  id_ = 0;
dirty_ = true;
}
::google::protobuf::int32 player_base::id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.id)
  return id_;
}
void player_base::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.player_base.id)
}

// optional bytes name = 2;
void player_base::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
dirty_ = true;
}
const ::std::string& player_base::name() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void player_base::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  dirty_ = true;
  // @@protoc_insertion_point(field_set:proto.db.player_base.name)
}
void player_base::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_char:proto.db.player_base.name)
}
void player_base::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  dirty_ = true;
  // @@protoc_insertion_point(field_set_pointer:proto.db.player_base.name)
}
::std::string* player_base::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.db.player_base.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* player_base::release_name() {
  // @@protoc_insertion_point(field_release:proto.db.player_base.name)
  
  dirty_ = true;
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void player_base::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  dirty_ = true;
  // @@protoc_insertion_point(field_set_allocated:proto.db.player_base.name)
}

inline const player_base* player_base::internal_default_instance() {
  return &player_base_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_base_set::kDataSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_base_set::player_base_set()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_player_5fbase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_base_set)
}

void player_base_set::InitAsDefaultInstance() {
}

player_base_set::player_base_set(const player_base_set& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.db.player_base_set)
}

void player_base_set::SharedCtor() {
  dirty_ = false;
  _cached_size_ = 0;
}

player_base_set::~player_base_set() {
  // @@protoc_insertion_point(destructor:proto.db.player_base_set)
  SharedDtor();
}

void player_base_set::SharedDtor() {
}

void player_base_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_base_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_base_set_descriptor_;
}

const player_base_set& player_base_set::default_instance() {
  protobuf_InitDefaults_player_5fbase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<player_base_set> player_base_set_default_instance_;

player_base_set* player_base_set::New(::google::protobuf::Arena* arena) const {
  player_base_set* n = new player_base_set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_base_set::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_base_set)
  data_set_.Clear();
}

bool player_base_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_base_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.db.player_base data_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data_set;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_base_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_base_set)
  return false;
#undef DO_
}

void player_base_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_base_set)
  // repeated .proto.db.player_base data_set = 1;
  for (unsigned int i = 0, n = this->data_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_set(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.db.player_base_set)
}

::google::protobuf::uint8* player_base_set::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_base_set)
  // repeated .proto.db.player_base data_set = 1;
  for (unsigned int i = 0, n = this->data_set_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_set(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_base_set)
  return target;
}

size_t player_base_set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_base_set)
  size_t total_size = 0;

  // repeated .proto.db.player_base data_set = 1;
  {
    unsigned int count = this->data_set_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_set(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_base_set::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_base_set)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const player_base_set* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_base_set>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_base_set)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_base_set)
    UnsafeMergeFrom(*source);
  }
}

void player_base_set::MergeFrom(const player_base_set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_base_set)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void player_base_set::UnsafeMergeFrom(const player_base_set& from) {
  GOOGLE_DCHECK(&from != this);
  data_set_.MergeFrom(from.data_set_);
}

void player_base_set::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_base_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_base_set::CopyFrom(const player_base_set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_base_set)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool player_base_set::IsInitialized() const {

  return true;
}

void player_base_set::Swap(player_base_set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_base_set::InternalSwap(player_base_set* other) {
  data_set_.UnsafeArenaSwap(&other->data_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_base_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_base_set_descriptor_;
  metadata.reflection = player_base_set_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_base_set

// repeated .proto.db.player_base data_set = 1;
int player_base_set::data_set_size() const {
  return data_set_.size();
}
void player_base_set::clear_data_set() {
  data_set_.Clear();
dirty_ = true;
}
const ::proto::db::player_base& player_base_set::data_set(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.player_base_set.data_set)
  return data_set_.Get(index);
}
::proto::db::player_base* player_base_set::mutable_data_set(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.player_base_set.data_set)
  return data_set_.Mutable(index);
}
::proto::db::player_base* player_base_set::add_data_set() {
  // @@protoc_insertion_point(field_add:proto.db.player_base_set.data_set)
  return data_set_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::db::player_base >*
player_base_set::mutable_data_set() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.player_base_set.data_set)
  return &data_set_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >&
player_base_set::data_set() const {
  // @@protoc_insertion_point(field_list:proto.db.player_base_set.data_set)
  return data_set_;
}

inline const player_base_set* player_base_set::internal_default_instance() {
  return &player_base_set_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)
